/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package sandbox

import java.io.File

class App {}

data class Coord(val row: Int, val col: Int)

fun getSurrounding(lines: List<String>, segment: Pair<Coord, Coord>): List<Char> {
  var list = mutableListOf<Char>()

  for (row in (segment.first.row - 1)..(segment.second.row - 1)) {
    for (col in (segment.first.col - 1)..(segment.second.col + 1)) {
      var x: Char? = lines.getOrNull(row)?.getOrNull(col)
      if (x != null) {
        list.add(x)
      }
    }
  }

  var left = lines.getOrNull(segment.first.row)?.getOrNull(segment.first.col - 1)
  if (left != null) {
    list.add(left)
  }

  var right = lines.getOrNull(segment.second.row)?.getOrNull(segment.second.col + 1)
  if (right != null) {
    list.add(right)
  }

  for (row in (segment.first.row + 1)..(segment.second.row + 1)) {
    for (col in (segment.first.col - 1)..(segment.second.col + 1)) {
      var x = lines.getOrNull(row)?.getOrNull(col)
      if (x != null) {
        list.add(x)
      }
    }
  }

  return list
}

fun findNumbers(lines: List<String>): List<Pair<Coord, Coord>> {
  var coords = mutableListOf<Pair<Coord, Coord>>()

  for (i in 0..lines.lastIndex) {
    var inNumber = false
    var start = Coord(-1, -1)
    for (j in 0..lines[i].lastIndex) {
      if (!inNumber && lines[i][j].isDigit()) {
        inNumber = true
        start = Coord(i, j)
      }
      if (inNumber && (j == lines[i].lastIndex || !lines[i][j + 1].isDigit())) {
        inNumber = false
        coords.add(Pair(start, Coord(i, j)))
      }
    }
  }

  return coords
}

fun gears(lines: List<String>): List<Coord> {
  var gearCoords = mutableListOf<Coord>()
  for (row in 0..lines.lastIndex) {
    for (col in 0..lines[row].lastIndex) {
      if (lines[row][col] == '*') {
        gearCoords.add(Coord(row, col))
      }
    }
  }
  return gearCoords
}

fun borders(range: Pair<Coord, Coord>, coord: Coord): Boolean {
  if (!(coord.row == range.first.row ||
          coord.row + 1 == range.first.row ||
          coord.row - 1 == range.first.row)
  ) {
    return false
  }
  for (col in range.first.col - 1..range.second.col + 1) {
    if (coord.col == col) {
      return true
    }
  }
  return false
}

fun indexWithRange(lines: List<String>, range: Pair<Coord, Coord>): String {
  return lines[range.first.row].substring(range.first.col, range.second.col + 1)
}

fun main() {
  var lines = File("/home/truff/.local/src/Solutions/AOC-2023/day-3/input.txt").readLines()
  print("part1: ")
  println(
      findNumbers(lines)
          .stream()
          .map({ Pair(indexWithRange(lines, it).toInt(), getSurrounding(lines, it)) })
          .filter({ !it.second.all({ it == '.' }) })
          .map({ it.first })
          .reduce(0, { a, b -> a + b })
  )

  print("part2: ")
  println(
      gears(lines)
          .stream()
          .map({ x ->
            findNumbers(lines)
                .stream()
                .filter({ borders(it, x) })
                .map({ indexWithRange(lines, it).toInt() })
                .toList()
          })
          .filter({it.size == 2})
          .map({it[0] * it[1]})
          .reduce(0, { a, b -> a + b })
  )
}
